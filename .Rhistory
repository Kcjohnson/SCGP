## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(-everything(), starts_with("sample"),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),id,.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("RG"), starts_with("file"), starts_with("sample")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),id,.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("RG"), starts_with("file"), starts_with("sample")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
tmp = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG"))
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups) %>% #
nest(starts_with("RG"),starts_with("files"),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files) %>%
nest(-(1:4),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:4),.key=files) %>%
nest(-(1:1),.key=samples)
View(nested_filtered_files_rgs)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Insert readgroups
rgs = read.delim('data/ref/TCGA_BAM_readgroups.txt', as.is = T, header = F)
rgs = rgs %>% mutate(id = basename(dirname(V1)),
rg_ID = gsub("ID\\:","", V3),
rg_PL = gsub("PL\\:","", V4),
rg_PU = gsub("PU\\:","", V5),
rg_LB = gsub("LB\\:","", V6),
rg_PI = gsub("PI\\:","", V7),
rg_DT = gsub("DT\\:","", V8),
rg_SM = gsub("SM\\:","", V9),
rg_CN = gsub("CN\\:","", V10)) %>%
select(-starts_with("V"))
## Full-join
filtered_files_rgs = filtered_files %>% right_join(rgs)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("rg")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
write(jsonlite::toJSON(nested_filtered_files, pretty = T), file = unpaired_json)
write(jsonlite::toJSON(nested_filtered_files_rgs, pretty = T), file = unpaired_json)
test=filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format)
View(test)
tmp = unnest(nested_filtered_files_rgs)
View(tmp)
tmp = unnest(unnest(nested_filtered_files_rgs))
getwd()
find_bam = list.files("download/")
find_bam = list.files("download/", pattern = "*bam")
find_bam = list.files("download/", pattern = "*bam", recursive = T)
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
setwd("/Volumes/Helix-Projects/GLASS-WG")
cases_json      = "data/manifest/tcga/cases.json"
samples_json    = "data/manifest/tcga/samples.json"
aliquots_json   = "data/manifest/tcga/aliquots.json"
readgroups_json = "data/manifest/tcga/readgroups.json"
files_json      = "data/manifest/tcga/files.json"
pairs_json      = "data/manifest/tcga/pairs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
library(GenomicDataCommons)
library(listviewer)
cases_json      = "data/manifest/tcga/cases.json"
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = F) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
?save.image
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
setwd("/Volumes/Helix-Projects/GLASS-WG")
## Aliquots
df2 = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
df2 = df2 %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("TCGA", sample_id))
tmp = jsonlite::read_json("data/ref/TCGA_WGS_GDC_legacy_UUIDs.json", simplifyVector=T)
df = tmp %>% unnest(samples) %>%
unnest(files) %>%
unnest(readgroups) %>%
mutate(sample_id = sprintf("%s-%s", case_id, sample_type_code)) %>%
left_join(df2)
files = df %>%
mutate(file_path = sprintf("/fastscratch/barthf/GLASS-WG/download/%s/%s", file_uuid, file_name)) %>%
select(file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>%
distinct()
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(df, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
### aliquots
aliquots = df %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
## Samples
samples = df %>% select(case_id, sample_id, sample_type = sample_type_code) %>% distinct()
### Cases
cases = df %>% select(case_id, project_id = case_project)
## Pairs
p1 = samples %>% filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_sample_id = TP, normal_sample_id = NB)
p2 = samples %>% filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_sample_id = R1, normal_sample_id = NB)
p3 = samples %>% filter(sample_type %in% c("R2", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R2) %>%
select(case_id, pair_id, tumor_sample_id = R2, normal_sample_id = NB)
pairs = rbind(p1,p2,p3) %>% filter(complete.cases(tumor_sample_id, normal_sample_id))
write(jsonlite::toJSON(cases, pretty = T), file = "data/manifest/tcga/cases.json")
write(jsonlite::toJSON(samples, pretty = T), file = "data/manifest/tcga/samples.json")
write(jsonlite::toJSON(aliquots, pretty = T), file = "data/manifest/tcga/aliquots.json")
write(jsonlite::toJSON(readgroups, pretty = T), file = "data/manifest/tcga/readgroups.json")
write(jsonlite::toJSON(pairs, pretty = T), file = "data/manifest/tcga/pairs.json")
write(jsonlite::toJSON(files, pretty = T), file = "data/manifest/tcga/files.json")
## Aliquots
df2 = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
df2 = df2 %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("TCGA", sample_id))
tmp = jsonlite::read_json("data/ref/TCGA_WGS_GDC_legacy_UUIDs.json", simplifyVector=T)
df = tmp %>% unnest(samples) %>%
unnest(files) %>%
unnest(readgroups) %>%
mutate(sample_id = sprintf("%s-%s", case_id, sample_type_code)) %>%
left_join(df2)
files = df %>%
mutate(file_path = sprintf("/fastscratch/barthf/GLASS-WG/download/%s/%s", file_uuid, file_name)) %>%
select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>%
distinct()
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(df, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
### aliquots
aliquots = df %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
## Samples
samples = df %>% select(case_id, sample_id, sample_type = sample_type_code) %>% distinct()
### Cases
cases = df %>% select(case_id, project_id = case_project)
## Pairs
p1 = samples %>% filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_sample_id = TP, normal_sample_id = NB)
p2 = samples %>% filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_sample_id = R1, normal_sample_id = NB)
p3 = samples %>% filter(sample_type %in% c("R2", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R2) %>%
select(case_id, pair_id, tumor_sample_id = R2, normal_sample_id = NB)
pairs = rbind(p1,p2,p3) %>% filter(complete.cases(tumor_sample_id, normal_sample_id))
write(jsonlite::toJSON(files, pretty = T), file = "data/manifest/tcga/files.json")
write(jsonlite::toJSON(cases, pretty = T), file = "data/manifest/tcga/cases.json")
write(jsonlite::toJSON(samples, pretty = T), file = "data/manifest/tcga/samples.json")
write(jsonlite::toJSON(aliquots, pretty = T), file = "data/manifest/tcga/aliquots.json")
write(jsonlite::toJSON(readgroups, pretty = T), file = "data/manifest/tcga/readgroups.json")
write(jsonlite::toJSON(pairs, pretty = T), file = "data/manifest/tcga/pairs.json")
## Aliquots
df2 = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
df2 = df2 %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("TCGA", sample_id))
tmp = jsonlite::read_json("data/ref/TCGA_WGS_GDC_legacy_UUIDs.json", simplifyVector=T)
df = tmp %>% unnest(samples) %>%
unnest(files) %>%
unnest(readgroups) %>%
mutate(sample_id = sprintf("%s-%s", case_id, sample_type_code)) %>%
left_join(df2)
files = df %>%
mutate(file_path = sprintf("/fastscratch/barthf/GLASS-WG/download/%s/%s", file_uuid, file_name)) %>%
select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>%
distinct()
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(df, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA))
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(df, file_uuid, aliquot_id))
tmp = select(df, file_uuid, aliquot_id)
View(tmp)
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(files, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
### aliquots
aliquots = df %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
## Samples
samples = df %>% select(case_id, sample_id, sample_type = sample_type_code) %>% distinct()
### Cases
cases = df %>% select(case_id, project_id = case_project)
## Pairs
p1 = samples %>% filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_sample_id = TP, normal_sample_id = NB)
p2 = samples %>% filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_sample_id = R1, normal_sample_id = NB)
p3 = samples %>% filter(sample_type %in% c("R2", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R2) %>%
select(case_id, pair_id, tumor_sample_id = R2, normal_sample_id = NB)
pairs = rbind(p1,p2,p3) %>% filter(complete.cases(tumor_sample_id, normal_sample_id))
write(jsonlite::toJSON(files, pretty = T), file = "data/manifest/tcga/files.json")
write(jsonlite::toJSON(cases, pretty = T), file = "data/manifest/tcga/cases.json")
write(jsonlite::toJSON(samples, pretty = T), file = "data/manifest/tcga/samples.json")
write(jsonlite::toJSON(aliquots, pretty = T), file = "data/manifest/tcga/aliquots.json")
write(jsonlite::toJSON(readgroups, pretty = T), file = "data/manifest/tcga/readgroups.json")
write(jsonlite::toJSON(pairs, pretty = T), file = "data/manifest/tcga/pairs.json")
table(duplicated(pairs$pair_id))
aliquots %>% left_join(samples)
## Aliquots
df2 = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
df2 = df2 %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("TCGA", sample_id))
tmp = jsonlite::read_json("data/ref/TCGA_WGS_GDC_legacy_UUIDs.json", simplifyVector=T)
df = tmp %>% unnest(samples) %>%
unnest(files) %>%
unnest(readgroups) %>%
mutate(sample_id = sprintf("%s-%s", case_id, sample_type_code)) %>%
left_join(df2)
files = df %>%
mutate(file_path = sprintf("/fastscratch/barthf/GLASS-WG/download/%s/%s", file_uuid, file_name)) %>%
select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>%
distinct()
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(files, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
### aliquots
aliquots = df %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
## Samples
samples = df %>% select(case_id, sample_id, sample_type = sample_type_code) %>% distinct()
### Cases
cases = df %>% select(case_id, project_id = case_project)
## Pairs
p1 = samples %>%
left_join(aliquots) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
View(p1)
p1 = samples %>%
left_join(aliquots) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id)
View(p1)
## Pairs
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
## Pairs
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
View(p1)
## Pairs
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, sample_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
p3 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R2", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R2) %>%
select(case_id, pair_id, tumor_aliquot_id = R2, normal_aliquot_id = NB)
View(p2)
View(p3)
pairs = rbind(p1,p2,p3) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
