inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
hf_map_df = hf_df %>%
mutate(file_name = sapply(strsplit(hf_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*FORD- *(.*?) *_1.*", "\\1", file_name_single)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
hf_map_df = hf_df %>%
mutate(file_name = sapply(strsplit(hf_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*FORD- *(.*?) *_1.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
set.seed(1)
hf_map_df$file_uuid = paste(stri_rand_strings(dim(hf_map_df)[1], 8, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 12, "[a-z0-9]"),
sep = "-")
n_distinct(hf_map_df$file_uuid)
hf_map_df = hf_map_df %>% mutate(file_size = "NA",
file_md5sum = "NA",
aliquot_id = sprintf("%s-%s", Barcode, uuid),
file_format = "BAM")
files = hf_map_df %>% select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>% distinct()
hf_map_df = hf_map_df %>%
mutate(case_id = substring(Barcode, 1, 12),
project_id = "GLSS-HF")
cases = hf_map_df %>% select(case_id, project_id)
hf_map_df$sample_type = substring(hf_map_df$Barcode, 14, 15)
samples = hf_map_df %>% select(case_id, sample_id = Barcode, legacy_sample_id, sample_type) %>% distinct()
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
pairs = rbind(p1,p2) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
readgroup_df = hf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", hf_map_df$file_name),
sub(".*s_ *(.*?) *_rg.*", "\\1", hf_map_df$file_name) , sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
print(sprintf("Exporting manifest as json files for snakemake use."))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
print(sprintf("Exporting manifest as tsv files for visualization ease."))
write.table(aliquots, file = sprintf("%s.%s", aliquots_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(files, file = sprintf("%s.%s", files_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(cases, file = sprintf("%s.%s", cases_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(pairs, file = sprintf("%s.%s", pairs_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(samples, file = sprintf("%s.%s", samples_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
save.image(file.path(sprintf("R/RData/hf-create-manifest_%s.RData", timetag)))
readgroups
View(readgroups)
readgroup_df = hf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", hf_map_df$file_name),
sub(".*s_ *(.*?) *_rg.*", "\\1", hf_map_df$file_name) , sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGSM = Barcode,
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
save.image(file.path(sprintf("R/RData/hf-create-manifest_%s.RData", timetag)))
HF_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
JDG_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
# Local directory for github repo.
mybasedir = "/Users/johnsk/Documents/Life-History/GLASS-WG"
setwd(mybasedir)
# Files with information about fastq information and barcodes.
JDG_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
# Create extensions for samples.
json_ext = "json"
text_ext = "tsv"
# Create output files for each metadata set.
cases_file      = "data/manifest/roel-jdg/cases"
samples_file    = "data/manifest/roel-jdg/samples"
aliquots_file   = "data/manifest/roel-jdg/aliquots"
readgroups_file = "data/manifest/roel-jdg/readgroups"
files_file      = "data/manifest/roel-jdg/files"
pairs_file      = "data/manifest/roel-jdg/pairs"
#######################################################
library(tidyverse)
library(openxlsx)
library(rjson)
library(jsonlite)
library(listviewer)
library(stringi)
library(stringr)
master_sheet = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
View(master_sheet)
aliquot_sheet = master_sheet %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("RV-JDG", sample_id))
aliquot_sheet = master_sheet %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("LP", sample_id))
View(aliquot_sheet)
aliquots = aliquot_sheet %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
jdg_df = read.table(JDG_file_path, stringsAsFactors = F)
View(jdg_df)
colnames(jdg_df) = c("file_path", "@RG" , "RGID", "RGPL", "RGLB", "RGSM", "RGCN")
drop_prefix = function(x) {gsub(".*:","", x) }
hf_df[3:7] <- lapply(hf_df[3:7], drop_prefix)
jdg_df[3:7] <- lapply(jdg_df[3:7], drop_prefix)
View(jdg_df)
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*FORD- *(.*?) *_1.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(jdg_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*FORD- *(.*?) *_1.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
jdg_df$file_path
strsplit(jdg_df$file_path, "/"), "[[", 6)
strsplit(jdg_df$file_path, "/")
View(master_sheet)
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(jdg_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*ROEL-JDG- *(.*?) *_.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
View(jdf_map_df)
set.seed(1)
jdf_map_df$file_uuid = paste(stri_rand_strings(dim(jdf_map_df)[1], 8, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 12, "[a-z0-9]"),
sep = "-")
# Sanity check: make sure each is unique.
n_distinct(jdf_map_df$file_uuid)
jdf_map_df = jdf_map_df %>% mutate(file_size = "NA",
file_md5sum = "NA",
aliquot_id = sprintf("%s-%s", Barcode, uuid),
file_format = "BAM")
hf_map_df
files = jdf_map_df %>% select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>% distinct()
jdf_map_df = jdf_map_df %>%
mutate(case_id = substring(Barcode, 1, 12),
project_id = "GLSS-MD")
cases = jdf_map_df %>% select(case_id, project_id)
jdf_map_df$sample_type = substring(jdf_map_df$Barcode, 14, 15)
samples = jdf_map_df %>% select(case_id, sample_id = Barcode, legacy_sample_id, sample_type) %>% distinct()
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
pairs = rbind(p1,p2) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
View(pairs)
View(pairs)
jdf_map_df$file_name
sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", jdf_map_df$file_name
)
sub(".*s_ *(.*?) *_rg.*", "\\1", jdf_map_df$file_name)
sub(".*s_ *(.*?) *_[A-Z]{8}.*", "\\1", jdf_map_df$file_name
)
jdf_map_df$file_name
sub(".*s_ *(.*?) *_[A-Za-z]{2}.*", "\\1", jdf_map_df$file_name)
readgroup_df = jdf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", jdf_map_df$file_name),
sub(".*s_ *(.*?) *_[A-Za-z]{2}.*", "\\1", jdf_map_df$file_name), sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGSM = Barcode,
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
View(readgroup_df)
readgroup_df = jdf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", jdf_map_df$file_name),
sub(".*s_ *(.*?) *_[A-Za-z]{2}.*", "\\1", jdf_map_df$file_name), sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
View(readgroup_df)
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
print(sprintf("Exporting manifest as json files for snakemake use."))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
print(sprintf("Exporting manifest as tsv files for visualization ease."))
write.table(aliquots, file = sprintf("%s.%s", aliquots_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(files, file = sprintf("%s.%s", files_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(cases, file = sprintf("%s.%s", cases_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(pairs, file = sprintf("%s.%s", pairs_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(samples, file = sprintf("%s.%s", samples_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mybasedir = "/Users/johnsk/Documents/Life-History/GLASS-WG"
setwd(mybasedir)
DG_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
# Create extensions for samples.
json_ext = "json"
text_ext = "tsv"
# Create output files for each metadata set.
cases_file      = "data/manifest/roel-jdg/cases"
samples_file    = "data/manifest/roel-jdg/samples"
aliquots_file   = "data/manifest/roel-jdg/aliquots"
readgroups_file = "data/manifest/roel-jdg/readgroups"
files_file      = "data/manifest/roel-jdg/files"
pairs_file      = "data/manifest/roel-jdg/pairs"
library(tidyverse)
library(openxlsx)
library(rjson)
library(jsonlite)
library(listviewer)
library(stringi)
library(stringr)
master_sheet = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
aliquot_sheet = master_sheet %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("LP", sample_id))
aliquots = aliquot_sheet %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
jdg_df = read.table(JDG_file_path, stringsAsFactors = F)
JDG_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
jdg_df = read.table(JDG_file_path, stringsAsFactors = F)
colnames(jdg_df) = c("file_path", "@RG" , "RGID", "RGPL", "RGLB", "RGSM", "RGCN")
drop_prefix = function(x) {gsub(".*:","", x) }
jdg_df[3:7] <- lapply(jdg_df[3:7], drop_prefix)
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(jdg_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*ROEL-JDG- *(.*?) *_.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
View(jdf_map_df)
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(jdg_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*ROEL-JDG- *(.*?) *_.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
set.seed(1)
jdf_map_df$file_uuid = paste(stri_rand_strings(dim(jdf_map_df)[1], 8, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 12, "[a-z0-9]"),
sep = "-")
View(jdf_map_df)
n_distinct(jdf_map_df$file_uuid)
jdf_map_df = jdf_map_df %>% mutate(file_size = "NA",
file_md5sum = "NA",
aliquot_id = sprintf("%s-%s", Barcode, uuid),
file_format = "BAM")
files = jdf_map_df %>% select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>% distinct()
jdf_map_df = jdf_map_df %>%
mutate(case_id = substring(Barcode, 1, 12),
project_id = "GLSS-MD")
cases = jdf_map_df %>% select(case_id, project_id)
jdf_map_df$sample_type = substring(jdf_map_df$Barcode, 14, 15)
samples = jdf_map_df %>% select(case_id, sample_id = Barcode, legacy_sample_id, sample_type) %>% distinct()
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
pairs = rbind(p1,p2) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
readgroup_df = jdf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", jdf_map_df$file_name),
sub(".*s_ *(.*?) *_[A-Za-z]{2}.*", "\\1", jdf_map_df$file_name), sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
print(sprintf("Exporting manifest as json files for snakemake use."))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
print(sprintf("Exporting manifest as tsv files for visualization ease."))
write.table(aliquots, file = sprintf("%s.%s", aliquots_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(files, file = sprintf("%s.%s", files_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(cases, file = sprintf("%s.%s", cases_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(pairs, file = sprintf("%s.%s", pairs_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(samples, file = sprintf("%s.%s", samples_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
save.image(file.path(sprintf("R/RData/jdg-create-manifest_%s.RData", timetag)))
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
save.image(file.path(sprintf("R/RData/jdg-create-manifest_%s.RData", timetag)))
# Local directory for github repo.
mybasedir = "/Users/johnsk/Documents/Life-History/GLASS-WG"
setwd(mybasedir)
# Files with information about fastq information and barcodes.
HF_file_path = "data/sequencing-information/HenryFord/henry_ford_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
# Create extensions for samples.
json_ext = "json"
text_ext = "tsv"
# Create output files for each metadata set.
cases_file      = "data/manifest/henryford/cases"
samples_file    = "data/manifest/henryford/samples"
aliquots_file   = "data/manifest/henryford/aliquots"
readgroups_file = "data/manifest/henryford/readgroups"
files_file      = "data/manifest/henryford/files"
pairs_file      = "data/manifest/henryford/pairs"
library(tidyverse)
library(openxlsx)
library(rjson)
library(jsonlite)
library(listviewer)
library(stringi)
library(stringr)
master_sheet = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
aliquot_sheet = master_sheet %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("HF", sample_id))
aliquots = aliquot_sheet %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
hf_df = read.table(HF_file_path, stringsAsFactors = F)
colnames(hf_df) = c("file_path", "@RG" , "RGID", "RGPL", "RGLB", "RGSM", "RGCN")
drop_prefix = function(x) {gsub(".*:","", x) }
hf_df[3:7] <- lapply(hf_df[3:7], drop_prefix)
hf_map_df = hf_df %>%
mutate(file_name = sapply(strsplit(hf_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*FORD- *(.*?) *_1.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
set.seed(1)
hf_map_df$file_uuid = paste(stri_rand_strings(dim(hf_map_df)[1], 8, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(hf_map_df)[1], 12, "[a-z0-9]"),
sep = "-")
n_distinct(hf_map_df$file_uuid)
hf_map_df = hf_map_df %>% mutate(file_size = "NA",
file_md5sum = "NA",
aliquot_id = sprintf("%s-%s", Barcode, uuid),
file_format = "BAM")
files = hf_map_df %>% select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>% distinct()
hf_map_df = hf_map_df %>%
mutate(case_id = substring(Barcode, 1, 12),
project_id = "GLSS-HF")
cases = hf_map_df %>% select(case_id, project_id)
hf_map_df$sample_type = substring(hf_map_df$Barcode, 14, 15)
samples = hf_map_df %>% select(case_id, sample_id = Barcode, legacy_sample_id, sample_type) %>% distinct()
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
pairs = rbind(p1,p2) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
readgroup_df = hf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", hf_map_df$file_name),
sub(".*s_ *(.*?) *_rg.*", "\\1", hf_map_df$file_name) , sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"),
RGID = paste0(substring(RGPU, 1, 4), substring(RGPU, nchar(RGPU)-1, nchar(RGPU)), ""))
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
print(sprintf("Exporting manifest as json files for snakemake use."))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
print(sprintf("Exporting manifest as tsv files for visualization ease."))
write.table(aliquots, file = sprintf("%s.%s", aliquots_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(files, file = sprintf("%s.%s", files_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(cases, file = sprintf("%s.%s", cases_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(pairs, file = sprintf("%s.%s", pairs_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(samples, file = sprintf("%s.%s", samples_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
save.image(file.path(sprintf("R/RData/hf-create-manifest_%s.RData", timetag)))
# Local directory for github repo.
mybasedir = "/Users/johnsk/Documents/Life-History/GLASS-WG"
setwd(mybasedir)
JDG_file_path = "data/sequencing-information/Roel-JDG/Roel_JDG_readgroups.txt"
life_history_barcodes = "data/sequencing-information/master_life_history_uniform_naming_incomplete.txt"
json_ext = "json"
text_ext = "tsv"
cases_file      = "data/manifest/roel-jdg/cases"
samples_file    = "data/manifest/roel-jdg/samples"
aliquots_file   = "data/manifest/roel-jdg/aliquots"
readgroups_file = "data/manifest/roel-jdg/readgroups"
files_file      = "data/manifest/roel-jdg/files"
pairs_file      = "data/manifest/roel-jdg/pairs"
library(tidyverse)
library(openxlsx)
library(rjson)
library(jsonlite)
library(listviewer)
library(stringi)
library(stringr)
master_sheet = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
aliquot_sheet = master_sheet %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("LP", sample_id))
aliquots = aliquot_sheet %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
jdg_df = read.table(JDG_file_path, stringsAsFactors = F)
colnames(jdg_df) = c("file_path", "@RG" , "RGID", "RGPL", "RGLB", "RGSM", "RGCN")
drop_prefix = function(x) {gsub(".*:","", x) }
jdg_df[3:7] <- lapply(jdg_df[3:7], drop_prefix)
jdf_map_df = jdg_df %>%
mutate(file_name = sapply(strsplit(jdg_df$file_path, "/"), "[[", 6),
legacy_sample_id = sub(".*ROEL-JDG- *(.*?) *_.*", "\\1", file_name)) %>%
inner_join(master_sheet, by = c("legacy_sample_id" = "Original_ID"))
set.seed(1)
jdf_map_df$file_uuid = paste(stri_rand_strings(dim(jdf_map_df)[1], 8, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 4, "[a-z0-9]"),
stri_rand_strings(dim(jdf_map_df)[1], 12, "[a-z0-9]"),
sep = "-")
n_distinct(jdf_map_df$file_uuid)
jdf_map_df = jdf_map_df %>% mutate(file_size = "NA",
file_md5sum = "NA",
aliquot_id = sprintf("%s-%s", Barcode, uuid),
file_format = "BAM")
files = jdf_map_df %>% select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>% distinct()
jdf_map_df = jdf_map_df %>%
mutate(case_id = substring(Barcode, 1, 12),
project_id = "GLSS-MD")
cases = jdf_map_df %>% select(case_id, project_id)
jdf_map_df$sample_type = substring(jdf_map_df$Barcode, 14, 15)
samples = jdf_map_df %>% select(case_id, sample_id = Barcode, legacy_sample_id, sample_type) %>% distinct()
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
pairs = rbind(p1,p2) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
readgroup_df = jdf_map_df %>%
mutate(RGPU = paste(sub(".*[0-9]{4}_ *(.*?) *_s.*", "\\1", jdf_map_df$file_name),
sub(".*s_ *(.*?) *_[A-Za-z]{2}.*", "\\1", jdf_map_df$file_name), sep="."),
RGPI = 0,
RGDT = strftime(as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%dT%H:%M:%S%z"))
readgroups = readgroup_df %>% select(file_uuid, aliquot_id, RGID, RGPL, RGPU, RGLB, RGPI, RGDT, RGSM, RGCN) %>% distinct()
print(sprintf("Exporting manifest as json files for snakemake use."))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
