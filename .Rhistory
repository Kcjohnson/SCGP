ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup()
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-Seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id) %>%
spread(experimental_strategy, id)
View(pair_wxs_rna)
table(duplicated(pair_wxs_rna$sample_id))
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM")
)
file_list %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
GenomicDataCommons::filter( ~ experimental_strategy == "WGS) %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
""
)
รง
:
""
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS")
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
library(GenomicDataCommons)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>% results()
file_list
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = F) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
GenomicDataCommons::status()
library(GenomicDataCommons)
#library(listviewer)
library(tidyverse)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy)
View(filtered_files)
format(filtered_files$file_size, "auto")
format.object_size(filtered_files$file_size, "auto")
gdata::humanReadable(filtered_files$file_size, units="Gb")
gdata::humanReadable(filtered_files$file_size)
gdata::humanReadable(filtered_files$file_size, units="GB")
gdata::humanReadable(filtered_files$file_size, units="GiB")
gdata::humanReadable(filtered_files$file_size, units="GB")
gdata::humanReadable(filtered_files$file_size, units="gB")
gdata::humanReadable(filtered_files$file_size, units="gb")
?gdata::humanReadable
gdata::humanReadable(filtered_files$file_size, standard="SI")
gdata::humanReadable(filtered_files$file_size, standard="Unix")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"))
View(filtered_files)
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
library(purrr)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
mtcars
?split
mtcars %>%
split(.$cyl)
mtcars %>%
group_by(.$cyl)
library(tidyverse)
library(tidyverse)
library(tidyverse)
mtcars %>%
group_by(.$cyl)
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .))
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .))
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary)
View(mtcars)
View(iris)
View(iris3)
View(faithfull)
View(faithful)
View(cars)
View(esoph)
c("P","R"){1:4}
c("P","R")
c("P","R")[1:4]
rep(c("P","R"),4)
rand
library(stringi)
sprintf("%s%s%s", stri_rand_strings(5, 5, '[A-Z]'),
stri_rand_strings(5, 4, '[0-9]'), stri_rand_strings(5, 1, '[A-Z]'))
stri_rand_strings(5, 5, '[A-Z]')
stri_rand_strings(5, 5, '[A-Z]')
stri_rand_strings(1, 5, '[A-Z]')
stri_rand_strings(8, 5, '[A-Z]')
stri_rand_strings(8, 6, '[A-Z]')
df = data.frame(patient = c(rep("A",4), rep("B",4)),
sample  = rep(c("P","R"),4),
file    = stri_rand_strings(8, 6, '[A-Z]'))
split(df, "patient")
?split
df %>%
split(.$patient)
df %>%
split(.$patient) %>%
map(split, .$sample)
?map
df
?map2
dfout <- df %>% group_by(patient, sample) %>%
summarize(files=list(map(file, ~list(file=.x))))
View(dfout)
dfout <- df %>% group_by(patient, sample) %>%
summarize(files=list(map(file, ~list(file=.x)))) %>%
summarize(samples=list(map2(sample, files, ~list(samples=.x, files=.y))))
View(dfout)
listviewer::jsonedit(dfout)
jsonlite::toJSON(dfout, auto_unbox = TRUE)
jsonlite::toJSON(dfout, auto_unbox = TRUE, pretty = T)
library(gapminder)
View(gapminder)
rownames(gapminder)
colnames(gapminder)
## Create a manifest of TCGA whole genome (WGS) files from LGG and GBM cohorts
## Limit to primary-recurrent triplets and 2nd recurrences
## @Author Floris Barthel
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
setwd("/Volumes/Helix-Projects/GLASS-WG")
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
## Make sure to include case ids
# "cases.project.project_id" = project (eg. TCGA-LGG)
# "cases.samples.sample_type" = sample type (eg. Primary Tumor)
# "cases.samples.portions.analytes.aliquots.submitter_id" = TCGA barcode
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12),
format = "BAM")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"),
sample_type_code = recode_factor(substr(aliquot_id, 14,16), "01A" = "TP", "01B" = "TP", "02A" = "R1", "02B" = "R2", "10A" = "NB", "10B" = "NB", "10D" = "NB"))
json = gapminder %>%
nest(-continent, .key = continents) %>%
mutate(continents = map(continents, nest, -country, .key=countries))
jsonlite::toJSON(json, pretty = T)
table(gapminder$continent)
json = gapminder %>%
filter(continent == "Oceania") %>% ## Limit data to Oceania to get a smaller table
nest(-continent, .key = continents) %>%
mutate(continents = map(continents, nest, -country, .key=countries))
jsonlite::toJSON(json, pretty = T)
json = gapminder %>%
filter(continent == "Oceania") %>% ## Limit data to Oceania to get a smaller table
nest(-continent, .key = continents) %>%
mutate(continents = map(continents, nest, -country, .key=years))
jsonlite::toJSON(json, pretty = T)
json = gapminder %>%
filter(continent == "Oceania") %>% ## Limit data to Oceania to get a smaller table
nest(-continent, .key = countries) %>%
mutate(countries = map(countries, nest, -country, .key=years))
jsonlite::toJSON(json, pretty = T)
LETTERS
LETTERS[2]
LETTERS[1:n_patient]
n_patient = 2
n_samples = 3
n_readgroup = 4
LETTERS[1:n_patient]
rep(LETTERS[1:n_patient], 4)
rep(LETTERS[1:n_patient], n_samples)
rep(seq(1:n_samples), each = n_patient)
df = data.frame(patient   = rep(LETTERS[1:n_patient], n_samples),
sample    = rep(seq(1:n_samples), each = n_patient),
readgroup = stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]')) %>%
mutate(file = sprinft("%s.%s.%s.txt", patient, sample, readgroup))
library(stringi)
n_patient = 2
n_samples = 3
n_readgroup = 4
df = data.frame(patient   = rep(LETTERS[1:n_patient], n_samples),
sample    = rep(seq(1:n_samples), each = n_patient),
readgroup = stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]')) %>%
mutate(file = sprinft("%s.%s.%s.txt", patient, sample, readgroup))
df = data.frame(patient   = rep(LETTERS[1:n_patient], n_samples),
sample    = rep(seq(1:n_samples), each = n_patient),
readgroup = stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]')) %>%
mutate(file = sprintf("%s.%s.%s.txt", patient, sample, readgroup))
View(df)
df = data.frame(patient   = rep(rep(LETTERS[1:n_patient], n_samples),2),
sample    = rep(rep(seq(1:n_samples), each = n_patient),2),
readgroup = rep(stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]'),2),
mate      = rep(1:n_mate, each = n_patient * n_samples * n_readgroup)) %>%
mutate(file = sprintf("%s.%s.%s_%s", patient, sample, readgroup, mate))
n_mate = 2
df = data.frame(patient   = rep(rep(LETTERS[1:n_patient], n_samples),2),
sample    = rep(rep(seq(1:n_samples), each = n_patient),2),
readgroup = rep(stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]'),2),
mate      = rep(1:n_mate, each = n_patient * n_samples * n_readgroup)) %>%
mutate(file = sprintf("%s.%s.%s_%s", patient, sample, readgroup, mate))
View(df)
df = data.frame(patient   = rep(rep(LETTERS[1:n_patient], n_samples),2),
sample    = rep(rep(seq(1:n_samples), each = n_patient),2),
readgroup = rep(stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]'),2),
mate      = rep(1:n_mate, each = n_patient * n_samples * n_readgroup)) %>%
mutate(file = sprintf("%s.%s.%s_%s", patient, sample, readgroup, mate)) %>%
arrange(file)
View(df)
json = df %>%
nest(-patient, .key = samples) %>%
mutate(samples = map(samples, nest, -readgroup, .key=readgroups))
jsonlite::toJSON(json, pretty = T)
json = df %>%
nest(-patient, .key = samples) %>%
mutate(samples = map(samples, nest, -sample, .key=readgroups))
jsonlite::toJSON(json, pretty = T)
head(df)
head(jsonlite::toJSON(json, pretty = T))
jsonlite::toJSON(json, pretty = T)
?jsonlite::toJSON
cat(jsonlite::toJSON(json, pretty = T))
?cat
jsonlite::toJSON(json, pretty = T)
json = df %>%
group_by(patient) %>%
nest()
json = df %>%
group_by(patient) %>%
group_by(sample) %>%
nest()
json = df %>%
group_by(patient) %>%
group_by(sample, add = T) %>%
nest()
jsonlite::toJSON(json, pretty = T)
