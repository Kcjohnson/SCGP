results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>% results()
file_list
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = F) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
GenomicDataCommons::status()
library(GenomicDataCommons)
#library(listviewer)
library(tidyverse)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Inspect list using listviewer::jsonedit
jsonedit(file_list)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS" &
type == "aligned_reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Flatten nested variables
file_list$project = map(file_list$cases, "project") %>% map_chr("project_id")
file_list$sample_type = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
file_list$aliquot_id = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS" &
type == "aligned_reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
length(file_list)
rm(file_list)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
count()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>% count()
fquery
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fquery = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS")
fquery %>% count()
?GenomicDataCommons::count
fquery %>% GenomicDataCommons::count()
rm(file_list)
fq
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS")
message(sprintf("Found %s hits", GenomicDataCommons::count(fq))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
fres = results_all(fq)
?results_all
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Inspect list using listviewer::jsonedit
jsonedit(fres)
map(fres$cases, "samples") %>% map(unlist)
map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
files(legacy = TRUE) %>% facet(c('type','data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
View(df)
substr(df$aliquot_id,15,17)
substr(df$aliquot_id,14,17)
substr(df$aliquot_id,14,16)
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(sample_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
paired_res = df %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(sample_id, project, sample_type_numeric, id)
View(paired_res)
table(duplicated(df$sample_id))
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F)
View(df)
table(df$sample_type)
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(sample_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(sample_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(sample_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(sample_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_res)
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
paired_res = df %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id)
View(paired_res)
table(paired_res$case_id)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F)
View(subset(df, df$id %in% c("ed7bb33a-0d4e-4215-b4c5-2dc1250d882b","359efa91-062f-491e-805a-0130efb943eb")))
?order
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(aliquot_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
paired_res = df %>%
group_by(aliquot_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1)
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(aliquot_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
paired_res = df %>%
group_by(aliquot_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1)
## Pair primary-recurrent-2ndrecurrence samples
paired_res = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_res)
jsonlite::toJSON(paired_res)
jsonedit(jsonlite::toJSON(paired_res))
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1)
View(filtered_files)
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -uploaded_datatime, -created_datetime, -experimental_strategy)
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -updated_datatime, -created_datetime, -experimental_strategy)
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -experimental_strategy)
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy)
View(filtered_files)
paired_files = filtered_files %>%
mutate(sample_type_numeric = substr(aliquot_id, 14,16)) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_files)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P")
)
View(paired_files)
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "O2A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N") %>%
)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "O2A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_files)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "02A" = "R1", "02B" = "R2", "10A" = "N", "10D" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_files)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "02A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_files)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "02A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N", "10D" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
View(paired_files)
View(filtered_files)
jsonlite::toJSON(filtered_files, auto_unbox = T)
jsonlite::toJSON(filtered_files, auto_unbox = F)
jsonlite::toJSON(filtered_files, pretty = T)
getwd()
setwd("/Volumes/Helix-Projects/GTex-somatic")
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
write(jsonlite::toJSON(filtered_files, pretty = T), file = unpaired_json)
sum(filtered_files$file_size)
gdata::humanReadable(sum(filtered_files$file_size)))
gdata::humanReadable(sum(filtered_files$file_size))
unpaired_json
getwd()
setwd("/Volumes/Helix-Projects/GLASS-WG")
write(jsonlite::toJSON(filtered_files, pretty = T), file = unpaired_json)
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy)
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "02A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N", "10D" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
write(jsonlite::toJSON(filtered_files, pretty = T), file = unpaired_json)
