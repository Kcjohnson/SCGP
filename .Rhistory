sapply(map(file_list$cases, "project"), dim)
sapply(map(file_list$cases, "project"), class)
map(file_list$cases, "project")
map(file_list$cases, "project") %>% map_chr("project_id")
table(map(file_list$cases, "project") %>% map_chr("project_id"))
map(file_list$cases, "project") %>% map_chr("project_id")
map(file_list$cases, "samples")
map(file_list$cases, "samples") %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map() %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map(.) %>% map_chr("sample_type")
tmpflatten <- function(lst) {
do.call(c, lapply(lst, function(x) if(is.list(x)) flatten(x) else list(x)))
}
tmpflatten(file_list)
test = tmpflatten(file_list)
View(test)
file_list$cases[1]
str(file_list$cases[1])
str(flatten(file_list$cases[1]))
map(file_list$cases, "samples") %>% map(flatten)
map(file_list$cases, "samples") %>% map(unlist)
map(file_list$cases, "samples") %>% map(unlist) %>% map_str("sample_type")
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map(unlist)
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.aliquot_id")
## Flatten nested variables
file_list$project = map(file_list$cases, "project") %>% map_chr("project_id")
file_list$sample_type = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
file_list$aliquot_id = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.aliquot_id")
str(file_list[-("cases")])
names(file_list)
names(file_list)=="cases"
which(names(file_list)=="cases")
str(file_list[-which(names(file_list)=="cases")])
map_chr(file_list, "analysis")
file_list$analysis
as.character(file_list$analysis)
str(file_list$analysis)
file_list$analysis[1]
file_list$analysis[1, drop=T]
rownames(file_list$analysis)
file_list$analysis[,1]
file_list$analysis_id = file_list$analysis[,1]
str(file_list[-which(names(file_list)=="cases")])
str(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
View(df)
## Find barcode field
grep('barcode', available_fields('files'), value=TRUE)
## Find barcode field
grep('tcga', available_fields('files'), value=TRUE)
## Find barcode field
grep('id', available_fields('files'), value=TRUE)
files() %>% facet('cases.samples.portions.analytes.analyte_id') %>% aggregations()
grep('entity', available_fields('files'), value=TRUE)
files() %>% facet('annotations.entity_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.entity_id') %>% aggregations()
files() %>% facet('associated_entities.entity_id') %>% aggregations()
## Find aliquot id field
grep('aliquot', available_fields('files'), value=TRUE)
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.case_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.aliquot_id') %>% aggregations()
files() %>% facet('cases.aliquot_ids') %>% aggregations()
files() %>% facet('cases.aliquot_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.case_submitter_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.entity_submitter_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.submitter_id') %>% aggregations()
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Flatten nested variables
file_list$project = map(file_list$cases, "project") %>% map_chr("project_id")
file_list$sample_type = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
file_list$aliquot_id = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ grepl("TCGA", cases.project.project_id) &
experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ grepl("TCGA", cases.project.project_id) &
experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
?grepl
table(df$id==df$file_id)
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))]) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project))
View(df)
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project))
df$created_datetime[1]
Date(df$created_datetime[1])
date(df$created_datetime[1])
date
as.Date(df$created_datetime[1])
as.POSIXct(df$created_datetime[1])
df$created_datetime[1]
as.POSIXct( "2016-05-29 12:44:46.784898-05:00")
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(aliquot_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1)
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(aliquot_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup()
table(pair_wxs_rna$q)
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id) %>%
spread(experimental_strategy, id)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup()
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-Seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id) %>%
spread(experimental_strategy, id)
View(pair_wxs_rna)
table(duplicated(pair_wxs_rna$sample_id))
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM")
)
file_list %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
GenomicDataCommons::filter( ~ experimental_strategy == "WGS) %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
""
)
ç
:
""
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS")
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
library(GenomicDataCommons)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>% results()
file_list
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = F) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
GenomicDataCommons::status()
library(GenomicDataCommons)
#library(listviewer)
library(tidyverse)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy)
View(filtered_files)
format(filtered_files$file_size, "auto")
format.object_size(filtered_files$file_size, "auto")
gdata::humanReadable(filtered_files$file_size, units="Gb")
gdata::humanReadable(filtered_files$file_size)
gdata::humanReadable(filtered_files$file_size, units="GB")
gdata::humanReadable(filtered_files$file_size, units="GiB")
gdata::humanReadable(filtered_files$file_size, units="GB")
gdata::humanReadable(filtered_files$file_size, units="gB")
gdata::humanReadable(filtered_files$file_size, units="gb")
?gdata::humanReadable
gdata::humanReadable(filtered_files$file_size, standard="SI")
gdata::humanReadable(filtered_files$file_size, standard="Unix")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"))
View(filtered_files)
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12))
View(df)
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12),
format = "BAM")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"))
paired_files = filtered_files %>%
mutate(sample_type_numeric = recode_factor(substr(aliquot_id, 14,16), "01A" = "P", "01B" = "P", "02A" = "R1", "02B" = "R2", "10A" = "N", "10B" = "N", "10D" = "N")) %>%
select(case_id, project, sample_type_numeric, id) %>%
spread(sample_type_numeric, id)
write(jsonlite::toJSON(filtered_files, pretty = T), file = unpaired_json)
setwd("/Volumes/Helix-Projects/GLASS-WG")
setwd("/Volumes/Helix-Projects/GLASS-WG")
write(jsonlite::toJSON(filtered_files, pretty = T), file = unpaired_json)
