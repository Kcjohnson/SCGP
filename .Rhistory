library(TxDb.Hsapiens.UCSC.hg19.knownGene)
biocLite('TxDb.Hsapiens.UCSC.hg19')
biocLite('TxDb.Hsapiens.UCSC.hg19.knownGene')
2^12
intToBits(2^12)
number2binary = function(number, noBits) {
binary_vector = rev(as.numeric(intToBits(number)))
if(missing(noBits)) {
return(binary_vector)
} else {
binary_vector[-(1:(length(binary_vector) - noBits))]
}
}
number2binary(2^12,12)
number2binary(2^12,13)
number2binary(2^12,12)
number2binary(2^3,12)
getwd()
load("/Volumes/Helix-Projects/PCTL/results/PCTL.telseq.geno.k7.anno.filtered.Rdata")
write.csv(ptel, file="all_data.csv")
load("/Volumes/Helix-Projects/Archived Projects/LGG-GBM/data/LGG-GBM.merged.data.FB20150706.Rdata")
load("/Volumes/Helix-Projects/Archived Projects/LGG-GBM/data/LGG-GBM.merged.data.FB20151007.Rdata")
ss = subset(pd, pd$IDH.codel.subtype == "IDHmut-non-codel")
boxplot(ss$TL.Tumor.PP.Adjusted ~ ss$ATRX.gene)
boxplot(ss$TL.Tumor.PP.Adjusted/ss$TL.Matched.Normal ~ ss$ATRX.gene)
table(ss$ATRX.gene)
table(ss$ATRX.gene, is.na(ss$TL.Matched.Normal))
library(ggplot2)
library(ggplot)
source("https://bioconductor.org/biocLite.R")
biocLite()
library(DESeq2)
biocLite('DESeq2')
library(tidyverse)
install.packages('tidyverse')
basedir = "~/projects/FM-Enolase/"
stardir = "data/star-align"
hexprf = "results/htseq/FM-Enolase.human.htseq.txt"
mexprf = "results/htseq/FM-Enolase.mouse.htseq.txt"
metaf = "data/meta/FM-Enolase.meta.csv"
library(tidyverse)
library(DESeq2)
setwd(basedir)
basedir = "/Volumes/Helix-Projects/FM-Enolase/"
stardir = "data/star-align"
hexprf = "results/htseq/FM-Enolase.human.htseq.txt"
mexprf = "results/htseq/FM-Enolase.mouse.htseq.txt"
metaf = "data/meta/FM-Enolase.meta.csv"
library(tidyverse)
library(DESeq2)
library(tidyverse)
library(tidyverse)
remove.packages('tidyverse')
install.packages('tidyverse')
install.packages("tidyverse")
data.frame() %>% as.matrix()
remove.packages("tidyverse", lib="~/Library/R/3.4/library")
library(tidyverse)
remove.packages("tidyverse", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(tidyverse)
library(tidyr)
install.packages('tidyverse')
library(tidyverse)
library("tidyverse", lib.loc="~/Library/R/3.4/library")
remove.packages("tidyverse", lib="~/Library/R/3.4/library")
library(ROCR)
install.packages('POCR')
install.packages('ROCR')
library(openxlsx)
dat = read.xlsx("~/Downloads/aao4426_TableS4.xlsx")
?read.xlsx
datlist = lapply(1:31, function(i) read.xlsx("~/Downloads/aao4426_TableS4.xlsx", sheet = i))
datlist = lapply(1:30, function(i) read.xlsx("~/Downloads/aao4426_TableS4.xlsx", sheet = i))
sapply(datlist, dim)
dat = data.table::rbindlist(datlist)
View(dat)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicDataCommons")
library(GenomicDataCommons)
files()
ge_manifest = files() %>%
filter( ~ cases.project.project_id == 'TCGA-OV' &
type == 'gene_expression' &
analysis.workflow_type == 'HTSeq - Counts') %>%
manifest()
View(ge_manifest)
ge_manifest = files() %>%
filter( ~ type == 'gene_expression' &
analysis.workflow_type == 'HTSeq - Counts') %>%
manifest()
library(GenomicDataCommons)
library(listviewer)
## Get a list of available fields to filter files on
available_fields('files')
## Make sure to include case ids
add_fields = c("cases.project.project_id", "cases.samples.sample_type", "analysis.analysis_id", "cases.samples.portions.analytes.aliquots.aliquot_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
filter( ~ experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
df = as.data.frame(file_list)
head(df)
map(file_list, "cases")
library(tidyverse)
map(file_list, "cases")
map(file_list, "cases") %>% map("samples")
map(file_list, "cases") %>% map("samples") %>% map_chr("sample_type")
map(file_list, "samples") %>% map_chr("sample_type")
map(file_list, "samples")
## Inspect list using listviewer::jsonedit
jsonedit(file_list)
save(file_list, file="/Volumes/Helix-Scratch/tmp.Rdata")
flatten(file_list$cases)
file_list$cases = flatten(file_list$cases)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
filter( ~ experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
map(file_list$cases, "project")
map_chr(file_list$cases, "project")
as.character(map(file_list$cases, "project"))
map_chr(file_list$cases, "project")
map(file_list$cases, "project")
sapply(map(file_list$cases, "project"), dim)
sapply(map(file_list$cases, "project"), class)
map(file_list$cases, "project")
map(file_list$cases, "project") %>% map_chr("project_id")
table(map(file_list$cases, "project") %>% map_chr("project_id"))
map(file_list$cases, "project") %>% map_chr("project_id")
map(file_list$cases, "samples")
map(file_list$cases, "samples") %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map() %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map(.) %>% map_chr("sample_type")
tmpflatten <- function(lst) {
do.call(c, lapply(lst, function(x) if(is.list(x)) flatten(x) else list(x)))
}
tmpflatten(file_list)
test = tmpflatten(file_list)
View(test)
file_list$cases[1]
str(file_list$cases[1])
str(flatten(file_list$cases[1]))
map(file_list$cases, "samples") %>% map(flatten)
map(file_list$cases, "samples") %>% map(unlist)
map(file_list$cases, "samples") %>% map(unlist) %>% map_str("sample_type")
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
map(file_list$cases, "samples") %>% map(unlist)
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.aliquot_id")
## Flatten nested variables
file_list$project = map(file_list$cases, "project") %>% map_chr("project_id")
file_list$sample_type = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
file_list$aliquot_id = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.aliquot_id")
str(file_list[-("cases")])
names(file_list)
names(file_list)=="cases"
which(names(file_list)=="cases")
str(file_list[-which(names(file_list)=="cases")])
map_chr(file_list, "analysis")
file_list$analysis
as.character(file_list$analysis)
str(file_list$analysis)
file_list$analysis[1]
file_list$analysis[1, drop=T]
rownames(file_list$analysis)
file_list$analysis[,1]
file_list$analysis_id = file_list$analysis[,1]
str(file_list[-which(names(file_list)=="cases")])
str(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
View(df)
## Find barcode field
grep('barcode', available_fields('files'), value=TRUE)
## Find barcode field
grep('tcga', available_fields('files'), value=TRUE)
## Find barcode field
grep('id', available_fields('files'), value=TRUE)
files() %>% facet('cases.samples.portions.analytes.analyte_id') %>% aggregations()
grep('entity', available_fields('files'), value=TRUE)
files() %>% facet('annotations.entity_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.entity_id') %>% aggregations()
files() %>% facet('associated_entities.entity_id') %>% aggregations()
## Find aliquot id field
grep('aliquot', available_fields('files'), value=TRUE)
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.case_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.aliquot_id') %>% aggregations()
files() %>% facet('cases.aliquot_ids') %>% aggregations()
files() %>% facet('cases.aliquot_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.case_submitter_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.annotations.entity_submitter_id') %>% aggregations()
files() %>% facet('cases.samples.portions.analytes.aliquots.submitter_id') %>% aggregations()
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Flatten nested variables
file_list$project = map(file_list$cases, "project") %>% map_chr("project_id")
file_list$sample_type = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
file_list$aliquot_id = map(file_list$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))])
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ grepl("TCGA", cases.project.project_id) &
experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ grepl("TCGA", cases.project.project_id) &
experimental_strategy %in% c("WXS", "RNA-Seq") &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
?grepl
table(df$id==df$file_id)
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))]) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project))
View(df)
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project))
df$created_datetime[1]
Date(df$created_datetime[1])
date(df$created_datetime[1])
date
as.Date(df$created_datetime[1])
as.POSIXct(df$created_datetime[1])
df$created_datetime[1]
as.POSIXct( "2016-05-29 12:44:46.784898-05:00")
## Convert to dataframe (finally!)
df = as.data.frame(file_list[-which(names(file_list) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16))
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(aliquot_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1)
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(aliquot_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup()
table(pair_wxs_rna$q)
pair_wxs_rna = df %>% arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id) %>%
spread(experimental_strategy, id)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id)
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup()
pair_wxs_rna = df %>%
mutate(experimental_strategy = ifelse(experimental_strategy == "RNA-Seq", "RNA", "DNA")) %>%
arrange(aliquot_id) %>%
group_by(sample_id) %>%
mutate(q=n_distinct(experimental_strategy)) %>%
ungroup() %>%
group_by(sample_id, experimental_strategy) %>%
mutate(p=1:n()) %>%
ungroup() %>%
filter(q==2, p==1) %>%
select(sample_id, project, experimental_strategy, id) %>%
spread(experimental_strategy, id)
View(pair_wxs_rna)
table(duplicated(pair_wxs_rna$sample_id))
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM")
)
file_list %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("LGG", "GBM") &
experimental_strategy == "WGS" &
type == "aligned_reads" &
cases.samples.sample_type == "Primary Tumor") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
GenomicDataCommons::filter( ~ experimental_strategy == "WGS) %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
""
)
ç
:
""
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS")
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WGS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results_all()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
library(GenomicDataCommons)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = T)%>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "WXS") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ experimental_strategy == "RNA-Seq") %>% # GenomicDataCommons::select(c(default_fields(files()), add_fields)) %>%
results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files() %>% results()
file_list
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = F) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
GenomicDataCommons::status()
library(GenomicDataCommons)
#library(listviewer)
library(tidyverse)
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = FALSE) %>% results()
file_list = files(legacy = TRUE) %>% results()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
file_list = files(legacy = TRUE) %>% results()
setwd("/Volumes/Helix-Projects/GLASS-WG")
>jsonlite::read_json('data/ref/TCGA_WGS_GDC_legacy_UUIDs.json')
tmp=jsonlite::read_json('data/ref/TCGA_WGS_GDC_legacy_UUIDs.json')
tmp=jsonlite::flatten(tmp)
tmp=as.data.frame(tmp)
View(tmp)
