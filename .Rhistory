View(faithful)
View(cars)
View(esoph)
c("P","R"){1:4}
c("P","R")
c("P","R")[1:4]
rep(c("P","R"),4)
rand
library(stringi)
sprintf("%s%s%s", stri_rand_strings(5, 5, '[A-Z]'),
stri_rand_strings(5, 4, '[0-9]'), stri_rand_strings(5, 1, '[A-Z]'))
stri_rand_strings(5, 5, '[A-Z]')
stri_rand_strings(5, 5, '[A-Z]')
stri_rand_strings(1, 5, '[A-Z]')
stri_rand_strings(8, 5, '[A-Z]')
stri_rand_strings(8, 6, '[A-Z]')
df = data.frame(patient = c(rep("A",4), rep("B",4)),
sample  = rep(c("P","R"),4),
file    = stri_rand_strings(8, 6, '[A-Z]'))
split(df, "patient")
?split
df %>%
split(.$patient)
df %>%
split(.$patient) %>%
map(split, .$sample)
?map
df
?map2
dfout <- df %>% group_by(patient, sample) %>%
summarize(files=list(map(file, ~list(file=.x))))
View(dfout)
dfout <- df %>% group_by(patient, sample) %>%
summarize(files=list(map(file, ~list(file=.x)))) %>%
summarize(samples=list(map2(sample, files, ~list(samples=.x, files=.y))))
View(dfout)
listviewer::jsonedit(dfout)
jsonlite::toJSON(dfout, auto_unbox = TRUE)
jsonlite::toJSON(dfout, auto_unbox = TRUE, pretty = T)
library(tidyverse)
library(stringi)
n_patient = 2
n_samples = 3
n_readgroup = 4
n_mate = 2
df = data.frame(patient   = rep(rep(LETTERS[1:n_patient], n_samples),2),
sample    = rep(rep(seq(1:n_samples), each = n_patient),2),
readgroup = rep(stri_rand_strings(n_patient * n_samples * n_readgroup, 6, '[A-Z]'),2),
mate      = rep(1:n_mate, each = n_patient * n_samples * n_readgroup)) %>%
mutate(file = sprintf("%s.%s.%s_%s", patient, sample, readgroup, mate)) %>%
arrange(file)
json = df %>%
nest(-patient, .key = samples) %>%
mutate(samples = map(samples, nest, -sample, .key=readgroups))
json3 <- df %>% nest(-(1:3),.key=mate) %>% nest(-(1:2),.key=readgroups) %>% nest(-1,.key=samples)
jsonlite::toJSON(json3,pretty=T)
vars <- names(df)[-1] # or whatever variables you want to nest, order matters!
View(df)
var_pairs <- map((length(vars)-1):1,~vars[.x:(.x+1)])
?reduce
nest_by
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)
library(tidyverse)
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)
library(rlang)
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)$x
quos(...)
quos(s)
quos(a)
quos(ag)
enquo(a,b,c)
enquo(a)
enquo(...)
## Create a manifest of TCGA whole genome (WGS) files from LGG and GBM cohorts
## Limit to primary-recurrent triplets and 2nd recurrences
## @Author Floris Barthel
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
setwd("/Volumes/Helix-Projects/GLASS-WG")
unpaired_json = "data/ref/TCGA_WGS_GDC_legacy_UUIDs.json"
## Make sure to include case ids
# "cases.project.project_id" = project (eg. TCGA-LGG)
# "cases.samples.sample_type" = sample type (eg. Primary Tumor)
# "cases.samples.portions.analytes.aliquots.submitter_id" = TCGA barcode
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect list using listviewer::jsonedit
jsonedit(fres)
## Flatten nested variables
fres$project = map(fres$cases, "project") %>% map_chr("project_id")
fres$sample_type = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("sample_type")
fres$aliquot_id = map(fres$cases, "samples") %>% map(unlist) %>% map_chr("portions.analytes.aliquots.submitter_id")
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12),
format = "BAM")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"),
sample_type_code = recode_factor(substr(aliquot_id, 14,16), "01A" = "TP", "01B" = "TP", "02A" = "R1", "02B" = "R2", "10A" = "NB", "10B" = "NB", "10D" = "NB"))
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"),
sample_type_code = recode_factor(substr(aliquot_id, 14,16), "01A" = "TP", "01B" = "TP", "02A" = "R1", "02B" = "R2", "10A" = "NB", "10B" = "NB", "10D" = "NB"))
## Convert to dataframe (finally!)
df = as.data.frame(fres[-which(names(fres) %in% c("cases", "acl", "analysis"))], stringsAsFactors = F) %>%
select(id, aliquot_id, project, sample_type, experimental_strategy, file_size, md5sum, file_name, created_datetime, updated_datetime) %>%
filter(grepl("TCGA", project)) %>%
mutate(sample_id = substr(aliquot_id,1,16),
case_id = substr(aliquot_id,1,12),
format = "BAM")
## Pair primary-recurrent-2ndrecurrence samples
filtered_files = df %>%
group_by(sample_id) %>%
mutate(p = order(file_size, decreasing = T)) %>%
ungroup() %>%
group_by(case_id) %>%
mutate(hasRec = any(sample_type == "Recurrent Tumor")) %>%
ungroup() %>%
filter(hasRec, p == 1) %>%
select(-hasRec, -p, -created_datetime, -updated_datetime, -experimental_strategy) %>%
mutate(file_size_readable = gdata::humanReadable(file_size, standard="Unix"),
sample_type_code = recode_factor(substr(aliquot_id, 14,16), "01A" = "TP", "01B" = "TP", "02A" = "R1", "02B" = "R2", "10A" = "NB", "10B" = "NB", "10D" = "NB"))
## Insert readgroups
rgs = read.delim('data/ref/TCGA_BAM_readgroups.txt', as.is = T, header = F)
n_distinct(rgs$V1)
basename(dirname(rgs$V1))
rgs = rgs %>% mutate(id = basename(dirname(V1)),
RGID = gsub("ID\\:","", V3))
rgs = rgs %>% mutate(id = basename(dirname(V1)),
file_name = basename(V1),
RGID = gsub("ID\\:","", V3),
RGPL = gsub("PL\\:","", V3),
RGPU = gsub("PU\\:","", V3),
RGLB = gsub("LB\\:","", V3),
RGPI = gsub("PI\\:","", V3),
RGDT = gsub("DT\\:","", V3),
RGSM = gsub("SM\\:","", V3),
RGCN = gsub("CN\\:","", V3)) %>%
select(-starts_with("V"))
View(rgs)
## Insert readgroups
rgs = read.delim('data/ref/TCGA_BAM_readgroups.txt', as.is = T, header = F)
rgs = rgs %>% mutate(id = basename(dirname(V1)),
file_name = basename(V1),
RGID = gsub("ID\\:","", V3),
RGPL = gsub("PL\\:","", V4),
RGPU = gsub("PU\\:","", V5),
RGLB = gsub("LB\\:","", V6),
RGPI = gsub("PI\\:","", V7),
RGDT = gsub("DT\\:","", V8),
RGSM = gsub("SM\\:","", V9),
RGCN = gsub("CN\\:","", V10)) %>%
select(-starts_with("V"))
View(rgs)
## Full-join
filtered_files_rgs = filtered_files %>% full_join(rgs)
View(filtered_files_rgs)
## Full-join
filtered_files_rgs = filtered_files %>% right_join(rgs)
View(filtered_files_rgs)
View(filtered_files)
## Insert readgroups
rgs = read.delim('data/ref/TCGA_BAM_readgroups.txt', as.is = T, header = F)
rgs = rgs %>% mutate(id = basename(dirname(V1)),
RGID = gsub("ID\\:","", V3),
RGPL = gsub("PL\\:","", V4),
RGPU = gsub("PU\\:","", V5),
RGLB = gsub("LB\\:","", V6),
RGPI = gsub("PI\\:","", V7),
RGDT = gsub("DT\\:","", V8),
RGSM = gsub("SM\\:","", V9),
RGCN = gsub("CN\\:","", V10)) %>%
select(-starts_with("V"))
## Full-join
filtered_files_rgs = filtered_files %>% right_join(rgs)
View(filtered_files_rgs)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("sample"),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("sample"),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(-everything(), starts_with("sample"),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),id,.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("RG"), starts_with("file"), starts_with("sample")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),id,.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("RG"), starts_with("file"), starts_with("sample")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
tmp = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG"))
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups) %>%
nest(starts_with("file"),.key=files)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files)
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(starts_with("RG"),.key=readgroups) %>% #
nest(starts_with("RG"),starts_with("files"),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:5),.key=files) %>%
nest(-(1:4),.key=samples)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-(1:7),.key=readgroups) %>% # starts_with("RG")
nest(-(1:4),.key=files) %>%
nest(-(1:1),.key=samples)
View(nested_filtered_files_rgs)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Insert readgroups
rgs = read.delim('data/ref/TCGA_BAM_readgroups.txt', as.is = T, header = F)
rgs = rgs %>% mutate(id = basename(dirname(V1)),
rg_ID = gsub("ID\\:","", V3),
rg_PL = gsub("PL\\:","", V4),
rg_PU = gsub("PU\\:","", V5),
rg_LB = gsub("LB\\:","", V6),
rg_PI = gsub("PI\\:","", V7),
rg_DT = gsub("DT\\:","", V8),
rg_SM = gsub("SM\\:","", V9),
rg_CN = gsub("CN\\:","", V10)) %>%
select(-starts_with("V"))
## Full-join
filtered_files_rgs = filtered_files %>% right_join(rgs)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("RG")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
## Nest
nested_filtered_files_rgs = filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format) %>%
select(starts_with("case"), starts_with("sample"), starts_with("file"), starts_with("rg")) %>%
nest(-starts_with("case"), -starts_with("sample"), -starts_with("file"), .key=readgroups) %>% # starts_with("RG")
nest(-starts_with("case"), -starts_with("sample"),.key=files) %>%
nest(-starts_with("case"),.key=samples)
jsonlite::toJSON(nested_filtered_files_rgs, pretty = T)
write(jsonlite::toJSON(nested_filtered_files, pretty = T), file = unpaired_json)
write(jsonlite::toJSON(nested_filtered_files_rgs, pretty = T), file = unpaired_json)
test=filtered_files_rgs %>%
mutate(file_uuid = id, case_project = project, file_md5sum = md5sum, file_format = format)
View(test)
tmp = unnest(nested_filtered_files_rgs)
View(tmp)
tmp = unnest(unnest(nested_filtered_files_rgs))
getwd()
find_bam = list.files("download/")
find_bam = list.files("download/", pattern = "*bam")
find_bam = list.files("download/", pattern = "*bam", recursive = T)
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
setwd("/Volumes/Helix-Projects/GLASS-WG")
cases_json      = "data/manifest/tcga/cases.json"
samples_json    = "data/manifest/tcga/samples.json"
aliquots_json   = "data/manifest/tcga/aliquots.json"
readgroups_json = "data/manifest/tcga/readgroups.json"
files_json      = "data/manifest/tcga/files.json"
pairs_json      = "data/manifest/tcga/pairs.json"
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
library(GenomicDataCommons)
library(listviewer)
cases_json      = "data/manifest/tcga/cases.json"
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = F) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
?save.image
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
add_fields = c("cases.project.project_id",
"cases.samples.sample_type",
"cases.samples.portions.analytes.aliquots.submitter_id")
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Get a list of all WXS/RNA-Seq aligned BAM files from primary tumors
fq = files(legacy = TRUE) %>%
GenomicDataCommons::filter( ~ cases.project.project_id %in% c("TCGA-LGG", "TCGA-GBM") &
experimental_strategy == "WGS" &
data_type == "Aligned reads") %>%
GenomicDataCommons::select(c(default_fields(files()), add_fields))
message(sprintf("Found %s hits", GenomicDataCommons::count(fq)))
## Extract results
fres = results_all(fq)
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
## Inspect data types
files(legacy = TRUE) %>% facet(c('data_type')) %>% aggregations()
library(GenomicDataCommons)
library(listviewer)
library(tidyverse)
## record base directory, typically ./.git dir is present
mybasedir = here::here()
## record base directory, typically ./.git dir is present
mybasedir = ".."
setwd(mybasedir)
getwd()
## record base directory, typically ./.git dir is present
mybasedir = "/Volumes/Helix-Projects/GLASS-WG/"
setwd(mybasedir)
getwd()
cases_file      = "data/manifest/tcga/cases"
samples_file    = "data/manifest/tcga/samples"
aliquots_file   = "data/manifest/tcga/aliquots"
readgroups_file = "data/manifest/tcga/readgroups"
files_file      = "data/manifest/tcga/files"
pairs_file      = "data/manifest/tcga/pairs"
json_ext = "json"
text_ext = "tsv"
## Aliquots
df2 = read.delim("data/sequencing-information/master_life_history_uniform_naming_incomplete.txt", as.is=T)
df2 = df2 %>% select(aliquot_uuid = uuid, sample_id = Barcode) %>%
mutate(aliquot_id = sprintf("%s-%s", sample_id, aliquot_uuid),
analyte_type = "DNA",
analysis_type = "WGS",
portion = 1) %>%
filter(grepl("TCGA", sample_id))
tmp = jsonlite::read_json("data/ref/TCGA_WGS_GDC_legacy_UUIDs.json", simplifyVector=T)
df = tmp %>% unnest(samples) %>%
unnest(files) %>%
unnest(readgroups) %>%
mutate(legacy_sample_id = sample_id,
sample_id = sprintf("%s-%s", case_id, sample_type_code)) %>%
left_join(df2)
files = df %>%
mutate(file_path = sprintf("/fastscratch/barthf/GLASS-WG/download/data/%s/%s", file_uuid, file_name)) %>%
select(aliquot_id, file_path, file_name, file_uuid, file_size, file_md5sum, file_format) %>%
distinct()
## Readgroups
rgs = readLines('data/ref/TCGA_BAM_readgroups.txt')
readgroups = data.frame(file_uuid = basename(dirname(gsub("\\t@RG.*$","",rgs))),
RGID = gsub("^.*ID:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPL = gsub("^.*PL:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPU = gsub("^.*PU:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGLB = gsub("^.*LB:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGPI = gsub("^.*PI:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGDT = gsub("^.*DT:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGSM = gsub("^.*SM:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
RGCN = gsub("^.*CN:([\\w\\.\\-\\:]+).*$", "\\1", rgs, perl=T),
stringsAsFactors = F) %>%
mutate(RGPI = ifelse(RGPI == 0, 0, NA)) %>%
left_join(select(files, file_uuid, aliquot_id)) %>%
select(file_uuid, aliquot_id, everything())
### aliquots
aliquots = df %>% select(sample_id, aliquot_uuid, aliquot_id, portion, analyte_type, analysis_type) %>% distinct()
## Samples
samples = df %>% select(case_id, sample_id, legacy_sample_id, sample_type = sample_type_code) %>% distinct()
### Cases
cases = df %>% select(case_id, project_id = case_project)
## Pairs
p1 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("TP", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = TP) %>%
select(case_id, pair_id, tumor_aliquot_id = TP, normal_aliquot_id = NB)
p2 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R1", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R1) %>%
select(case_id, pair_id, tumor_aliquot_id = R1, normal_aliquot_id = NB)
p3 = samples %>%
left_join(aliquots) %>%
select(sample_type, aliquot_id, case_id) %>%
filter(sample_type %in% c("R2", "NB")) %>%
spread(sample_type, aliquot_id) %>%
mutate(pair_id = R2) %>%
select(case_id, pair_id, tumor_aliquot_id = R2, normal_aliquot_id = NB)
pairs = rbind(p1,p2,p3) %>% filter(complete.cases(tumor_aliquot_id, normal_aliquot_id))
print(sprintf("Exporting manifest as json files"))
write(jsonlite::toJSON(files, pretty = T), file = sprintf("%s.%s", files_file, json_ext))
write(jsonlite::toJSON(cases, pretty = T), file = sprintf("%s.%s", cases_file, json_ext))
write(jsonlite::toJSON(samples, pretty = T), file = sprintf("%s.%s", samples_file, json_ext))
write(jsonlite::toJSON(aliquots, pretty = T), file = sprintf("%s.%s", aliquots_file, json_ext))
write(jsonlite::toJSON(readgroups, pretty = T), file = sprintf("%s.%s", readgroups_file, json_ext))
write(jsonlite::toJSON(pairs, pretty = T), file = sprintf("%s.%s", pairs_file, json_ext))
write.table(files, file = sprintf("%s.%s", files_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(cases, file = sprintf("%s.%s", cases_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(samples, file = sprintf("%s.%s", samples_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(aliquots, file = sprintf("%s.%s", aliquots_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(readgroups, file = sprintf("%s.%s", readgroups_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
write.table(pairs, file = sprintf("%s.%s", pairs_file, text_ext), sep="\t", row.names = F, col.names = T, quote = F)
mysession_info <- devtools::session_info()
timetag = make.names(format(Sys.time(),"t%d_%b_%y_%H%M%S%Z"))
print(sprintf("Done! Manifest RData file saved to R/RData/gdc-create-manifest_%s.RData\nManifest files in json formats are at data/manifest/tcga/", timetag))
